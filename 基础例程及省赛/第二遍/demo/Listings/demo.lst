C51 COMPILER V9.54   DEMO                                                                  05/13/2022 15:04:08 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE DEMO
OBJECT MODULE PLACED IN .\Objects\demo.obj
COMPILER INVOKED BY: D:\Keil5\installed file\C51\BIN\C51.EXE demo.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\
                    -Listings\demo.lst) OBJECT(.\Objects\demo.obj)

line level    source

   1          #include <STC15F2K60S2.H>
   2          #include "onewire.h"
   3          #include "ds1302.h"
   4          #include "iic.h"
*** ERROR C231 IN LINE 8 OF iic.h: 'SDA': redefinition
   5          
   6          typedef unsigned char u8;
   7          typedef unsigned int u16;
   8          
   9          
  10          u8 cnt = 0;
  11          u8 pwm_cnt = 0;
  12          u8 time_s = 0;
  13          u8 cnt_flag = 0;
  14          u8 s7_flag = 0, s6_flag = 0, s5_flag = 0;
  15          u8 pwm_duty = 0;
  16          u8 templ, temph;
  17          u16 temp;
  18          u16 pulse;        //555
  19          u16 pulse_cnt;
  20          float v_dat;
  21          u8 at24c02_dat;
  22          u8 code t_display[]={                       //标准字库
  23          //   0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
  24              0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71,
  25          //black  -     H    J    K    L    N    o   P    U     t    G    Q    r   M    y
  26              0x00,0x40,0x76,0x1E,0x70,0x38,0x37,0x5C,0x73,0x3E,0x78,0x3d,0x67,0x50,0x37,0x6e};
  27          u8 code dot_display[]={0xBF,0x86,0xDB,0xCF,0xE6,0xED,0xFD,0x87,0xFF,0xEF,0x46};    //0. 1. 2. 3. 4. 5. 6. 
             -7. 8. 9. -1
  28             
  29          u8 ds1302_writeaddr[] = {0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c};
  30          u8 ds1302_readaddr[] =  {0x81, 0x83, 0x85, 0x87, 0x89, 0x8b, 0x8d};
  31          
  32          u8 ds1302_buf[] = {0x45, 0x59, 0x23, 0x07, 0x05, 0x06, 0x22};
  33          
  34          void smgshow_temp();
  35          
  36          void hc138_select(u8 n)
  37          {
  38   1              switch(n)
  39   1              {
  40   2                      case 4:
  41   2                              P2 = (P2 & 0x1f) | 0x80;  break;
  42   2                      case 5:
  43   2                              P2 = (P2 & 0x1f) | 0xa0;  break;
  44   2                      case 6:
  45   2                              P2 = (P2 & 0x1f) | 0xc0;  break;
  46   2                      case 7:
  47   2                              P2 = (P2 & 0x1f) | 0xe0;  break;
  48   2              }
  49   1      }
  50          
  51          //void led_work()
  52          //{
C51 COMPILER V9.54   DEMO                                                                  05/13/2022 15:04:08 PAGE 2   

  53          //      hc138_select(4);
  54          //      if(cnt_flag)
  55          //              P0 = 0x00;
  56          //      else
  57          //              P0 = 0xff;
  58          //}
  59          
  60          void smg_delay()
  61          {
  62   1              u8 t = 100;
  63   1              while(t--);
  64   1      }
  65          
  66          void smg_showbit(u8 pos, u8 dat)
  67          {
  68   1              hc138_select(6);
  69   1              P0 = 1 << pos;
  70   1              hc138_select(7);
  71   1              P0 = dat;
  72   1              smg_delay();
  73   1              P0 = 0xff;
  74   1      }
  75          
  76          //void smgshow()
  77          //{
  78          //      /* SSPU */
  79          //      smg_showbit(0, ~t_display[5]);
  80          //      smg_showbit(1, ~t_display[5]);
  81          //      smg_showbit(2, ~t_display[24]);
  82          //      smg_showbit(3, ~t_display[25]);
  83          //      
  84          //      /* cnt */
  85          //      if(time_s > 999)
  86          //      {
  87          //              smg_showbit(4, ~t_display[time_s / 1000]);
  88          //      }
  89          //      if(time_s > 99)
  90          //      {
  91          //              smg_showbit(5, ~t_display[time_s % 1000 / 100]);
  92          //      }
  93          //      if(time_s > 9)
  94          //      {
  95          //              smg_showbit(6, ~t_display[time_s % 1000 % 100 / 10]);
  96          //      }
  97          //      smg_showbit(7, ~t_display[time_s % 10]);
  98          //}
  99          
 100          //void Tim_init()
 101          //{
 102          //      TMOD = 0x11;
 103          //      TH0 = (65535 - 50000) / 256;
 104          //      TL0 = (65535 - 50000) % 256;
 105          //      ET0 = 1;
 106          //      TR0 = 1;
 107          //      
 108          //      TH1 = (65535 - 100) / 256;
 109          //      TL1 = (65535 - 100) % 256;
 110          //      ET1 = 1;
 111          //      TR1 = 1;
 112          //      
 113          //      EA = 1;
 114          //}
C51 COMPILER V9.54   DEMO                                                                  05/13/2022 15:04:08 PAGE 3   

 115          
 116          /* 555 */
 117          //void Tim_init()
 118          //{
 119          //      TMOD = 0x16;
 120          //      TH1 = (65535 - 50000) / 256;
 121          //      TL1 = (65535 - 50000) % 256;    //计时
 122          //      ET1 = 1;
 123          //      TR1 = 1;
 124          //      
 125          //      TH0 = 0xff;                     //计数
 126          //      TL0 = 0xff;
 127          //      ET0 = 1;
 128          //      TR0 = 1;
 129          //      
 130          //      EA = 1;
 131          //}
 132          
 133          void Delay10ms()                //@11.0592MHz
 134          {
 135   1              unsigned char i, j;
 136   1      
 137   1              i = 108;
 138   1              j = 145;
 139   1              do
 140   1              {
 141   2                      while (--j);
 142   2              } while (--i);
 143   1      }
 144          
 145          
 146          //void key_scan()
 147          //{
 148          //      if(P30 == 0){
 149          //              Delay10ms();
 150          //              if(P30 == 0){
 151          //                      while(P30 == 0);
 152          //                      s7_flag = !s7_flag;
 153          //              }
 154          //      }
 155          //      if(P31 == 0){
 156          //              Delay10ms();
 157          //              if(P31 == 0){
 158          //                      while(P31 == 0);
 159          //                      s6_flag++;
 160          //                      if(s6_flag == 5){
 161          //                              s6_flag = 0;
 162          //                      }
 163          //                      pwm_duty = 25 * s6_flag;
 164          //              }
 165          //      }
 166          //      if(P32 == 0){
 167          //              Delay10ms();
 168          //              if(P32 == 0){
 169          //                      while(P32 == 0);
 170          //                      s6_flag = !s6_flag;
 171          //              }
 172          //      }
 173          //}
 174          
 175          //void temp_delay()
 176          //{
C51 COMPILER V9.54   DEMO                                                                  05/13/2022 15:04:08 PAGE 4   

 177          //      u8 t = 10;
 178          //      while(t--)
 179          //              smgshow_temp();
 180          //}
 181          
 182          //void get_temp()
 183          //{
 184          //      init_ds18b20();
 185          //      Write_DS18B20(0xcc);
 186          //      Write_DS18B20(0x44);
 187          //      temp_delay();
 188          //      init_ds18b20();
 189          //      Write_DS18B20(0xcc);
 190          //      Write_DS18B20(0xbe);
 191          //      
 192          //      templ = Read_DS18B20();
 193          //      temph = Read_DS18B20();
 194          //      temp = temph;
 195          //      temp = (temp << 8) | templ;
 196          //      if((temp & 0xf800) == 0x0000)
 197          //      {
 198          //              temp = (temp >> 4) * 10 + (temp & 0x0f) * 10 * 0.0625;
 199          //      }
 200          //}
 201          
 202          //void smgshow_temp()
 203          //{
 204          //      smg_showbit(0, 0xff);
 205          //      smg_showbit(1, 0xff);
 206          //      smg_showbit(2, 0xff);
 207          //      smg_showbit(3, 0xff);
 208          //      smg_showbit(4, 0xff);
 209          //      
 210          //      smg_showbit(5, ~t_display[temp / 100]);
 211          //      smg_showbit(6, ~dot_display[temp % 100 / 10]);
 212          //      smg_showbit(7, ~t_display[temp % 10]);
 213          //}
 214          
 215          void sys_init()
 216          {
 217   1              hc138_select(4);
 218   1              P0 = 0xff;
 219   1              hc138_select(5);
 220   1              P0 = 0x00;
 221   1              hc138_select(6);
 222   1              P0 = 0xff;
 223   1              hc138_select(7);
 224   1              P0 = 0xff;
 225   1      }
 226          
 227          //void ds1302_init()
 228          //{
 229          //      u8 i;
 230          //      Write_Ds1302_Byte(0x8e, 0x00);    //关闭写保护
 231          //      for(i = 0; i < 7; i++){
 232          //              Write_Ds1302_Byte(ds1302_writeaddr[i], ds1302_buf[i]);
 233          //      }
 234          //      Write_Ds1302_Byte(0x8e, 0x80);    //打开写保护
 235          //}
 236          
 237          //void read_ds1302()
 238          //{
C51 COMPILER V9.54   DEMO                                                                  05/13/2022 15:04:08 PAGE 5   

 239          //      u8 i;
 240          //      
 241          //      for(i = 0; i < 7; i++){
 242          //              ds1302_buf[i] = Read_Ds1302_Byte(ds1302_readaddr[i]);
 243          //      }
 244          //}
 245          
 246          //void smgshow_ds1302()
 247          //{
 248          //      smg_showbit(0, ~t_display[ds1302_buf[2] / 16]);
 249          //      smg_showbit(1, ~t_display[ds1302_buf[2] % 16]);
 250          //      smg_showbit(2, ~t_display[17]);
 251          //      smg_showbit(3, ~t_display[ds1302_buf[1] / 16]);
 252          //      smg_showbit(4, ~t_display[ds1302_buf[1] % 16]);
 253          //      smg_showbit(5, ~t_display[17]);
 254          //      smg_showbit(6, ~t_display[ds1302_buf[0] / 16]);
 255          //      smg_showbit(7, ~t_display[ds1302_buf[0] % 16]);
 256          //}
 257          
 258          //void smgshow_555pulse()
 259          //{
 260          //      if(pulse > 9999)
 261          //              smg_showbit(3, ~t_display[pulse / 10000]);
 262          //      if(pulse > 999)
 263          //              smg_showbit(4, ~t_display[pulse / 1000 % 10]);
 264          //      if(pulse > 99)
 265          //              smg_showbit(5, ~t_display[pulse / 100 % 10]);
 266          //      if(pulse > 9)
 267          //              smg_showbit(6, ~t_display[pulse / 10 % 10]);
 268          //      smg_showbit(7, ~t_display[pulse % 10]);
 269          //}
 270          
 271          //void pcf8591_adc(u8 addr)
 272          //{
 273          //      IIC_Start();
 274          //      IIC_SendByte(0x90);
 275          //      IIC_WaitAck();
 276          //      IIC_SendByte(addr);
 277          //      IIC_WaitAck();
 278          //      IIC_Stop();
 279          //      
 280          //      IIC_Start();
 281          //      IIC_SendByte(0x91);
 282          //      IIC_WaitAck();
 283          //      v_dat = IIC_RecByte();
 284          //      IIC_SendAck(0);
 285          //      IIC_Stop();
 286          //      
 287          //      v_dat = v_dat * 500 / 255;
 288          //}
 289          
 290          //void pcf8591_dac(u8 dat)
 291          //{
 292          //      IIC_Start();
 293          //      IIC_SendByte(0x90);
 294          //      IIC_WaitAck();
 295          //      IIC_SendByte(0x40);        //表示dac，dac功能与CONTROL BYTE的低七位无关
 296          //      IIC_WaitAck();
 297          //      
 298          //      IIC_SendByte(dat);
 299          //      IIC_WaitAck();
 300          //      IIC_Stop();
C51 COMPILER V9.54   DEMO                                                                  05/13/2022 15:04:08 PAGE 6   

 301          //}
 302          
 303          //void smgshow_volt()
 304          //{
 305          //      smg_showbit(5, ~t_display[(int)v_dat / 100]);
 306          //      smg_showbit(6, ~t_display[(int)v_dat / 10 % 10]);
 307          //      smg_showbit(7, ~t_display[(int)v_dat % 10]);
 308          //}
 309          
 310          void Delay5ms()         //@12.000MHz
 311          {
 312   1              unsigned char i, j;
 313   1      
 314   1              _nop_();
 315   1              _nop_();
 316   1              i = 59;
 317   1              j = 89;
 318   1              do
 319   1              {
 320   2                      while (--j);
 321   2              } while (--i);
 322   1      }
 323          
 324          
 325          void read_at24c02(u8 addr)
 326          {
 327   1              IIC_Start();
 328   1              IIC_SendByte(0xa0);
 329   1              IIC_WaitAck();
 330   1              IIC_SendByte(addr);
 331   1              IIC_WaitAck();
 332   1              IIC_Stop();
 333   1              
 334   1              IIC_Start();
 335   1              IIC_SendByte(0xa1);
 336   1              IIC_WaitAck();
 337   1              at24c02_dat = IIC_RecByte();
 338   1              IIC_SendAck(1);
 339   1              IIC_Stop();
 340   1      }
 341          
 342          void write_at24c02(u8 addr, u8 dat)
 343          {
 344   1              IIC_Start();
 345   1              IIC_SendByte(0xa0);
 346   1              IIC_WaitAck();
 347   1              IIC_SendByte(addr);
 348   1              IIC_WaitAck();
 349   1      
 350   1              IIC_SendByte(dat);
 351   1              IIC_WaitAck();
 352   1              IIC_Stop();
 353   1      }
 354          
 355          void smgshow_atdat()
 356          {
 357   1              smg_showbit(6, ~t_display[at24c02_dat / 10]);
 358   1              smg_showbit(7, ~t_display[at24c02_dat % 10]);
 359   1      }
 360          
 361          void main()
 362          {
C51 COMPILER V9.54   DEMO                                                                  05/13/2022 15:04:08 PAGE 7   

 363   1              Delay5ms();
 364   1      //      Tim_init();
 365   1              sys_init();
 366   1      //      ds1302_init();
 367   1              read_at24c02(0x01);
 368   1              Delay5ms();
 369   1              at24c02_dat += 1;
 370   1              write_at24c02(0x01, at24c02_dat);
 371   1              Delay5ms();
 372   1              
 373   1              while(1){
 374   2      //              read_ds1302();
 375   2      //              get_temp();
 376   2      //              key_scan();
 377   2      //              if(s7_flag == 0){
 378   2      //                      led_work();
 379   2      //                      smgshow();
 380   2      //              }
 381   2      //              else{
 382   2      //                      hc138_select(4);
 383   2      //                      P01 = 0;
 384   2      //              }
 385   2      //              smgshow_temp();
 386   2      //              smgshow_ds1302();
 387   2      //              smgshow_555pulse();
 388   2      //              pcf8591_adc(0x01);
 389   2      //              smgshow_volt();
 390   2      //              pcf8591_dac(0);
 391   2                      smgshow_atdat();
 392   2              }
 393   1      }
 394          
 395          //void tim0() interrupt 1
 396          //{
 397          //      cnt++;
 398          //      TH0 = (65535 - 50000) / 256;
 399          //      TL0 = (65535 - 50000) % 256;
 400          //              
 401          //      if(cnt == 20)
 402          //      {
 403          //              time_s++;
 404          //              if(time_s > 59)
 405          //                      time_s = 0;
 406          //              cnt = 0;
 407          //              cnt_flag = !cnt_flag;
 408          //      }
 409          //}
 410          
 411          //void tim1() interrupt 3
 412          //{
 413          //      pwm_cnt++;
 414          //      TH1 = (65535 - 100) / 256;
 415          //      TL1 = (65535 - 100) % 256;
 416          //      if(pwm_cnt == 100)
 417          //              pwm_cnt = 0;
 418          //      if(s7_flag){
 419          //              if(pwm_cnt < pwm_duty)
 420          //                      P00 = 0;
 421          //              else
 422          //                      P00 = 1;
 423          //      }
 424          //}
C51 COMPILER V9.54   DEMO                                                                  05/13/2022 15:04:08 PAGE 8   

 425          
 426          //计时
 427          //void tim1() interrupt 3
 428          //{
 429          //      cnt++;
 430          //      TH1 = (65535 - 50000) / 256;
 431          //      TL1 = (65535 - 50000) % 256;
 432          //              
 433          //      if(cnt == 20)
 434          //      {
 435          //              cnt = 0;
 436          //              pulse = pulse_cnt;
 437          //              pulse_cnt = 0;
 438          //      }
 439          //}
 440          ////计数
 441          //void tim0() interrupt 1
 442          //{
 443          //      pulse_cnt++;
 444          //}
 445          

C51 COMPILATION COMPLETE.  0 WARNING(S),  1 ERROR(S)
