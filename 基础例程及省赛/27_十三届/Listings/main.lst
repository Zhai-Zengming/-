C51 COMPILER V9.54   MAIN                                                                  05/09/2022 18:19:55 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil5\installed file\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\
                    -Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          /*
   2           * 2022/5/9
   3           */
   4          
   5          #include <STC15F2K60S2.H>
   6          #include "ds1302.h"                                                                     
   7          #include "onewire.h"
   8          
   9          u8 templ, temph;
  10          u16 temp;
  11          u8 settemp = 23;
  12          u8 s12_flag = 0, s13_flag = 0;
  13          u8 flag_5s = 0;
  14          u8 cnt = 0;
  15          u8 int_time = 0, relay_close = 0;
  16          u8 t1_cnt = 0, t1_flag_5s = 0;
  17          u8 L3_flag = 0, L3_cnt = 0;
  18          u8 ds1302_rdaddr[] = {0x81, 0x83, 0x85, 0x87, 0x89, 0x8b, 0x8d};
  19          u8 ds1302_wraddr[] = {0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c};
  20          u8 ds1302_buff[] =   {0x50, 0x59, 0x23, 0x09, 0x05, 0x01, 0x22};
  21          
  22          u8 code t_display[]={                       //标准字库
  23          //   0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
  24              0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71,
  25          //black  -     H    J    K    L    N    o   P    U     t    G    Q    r   M    y
  26              0x00,0x40,0x76,0x1E,0x70,0x38,0x37,0x5C,0x73,0x3E,0x78,0x3d,0x67,0x50,0x37,0x6e};
  27          
  28          u8 code dot_display[] = {0xBF,0x86,0xDB,0xCF,0xE6,0xED,0xFD,0x87,0xFF,0xEF,0x46};    //0. 1. 2. 3. 4. 5. 6
             -. 7. 8. 9. -1
  29          
  30          void smgshow();
  31          void relay_work();
  32          void led_work();
  33          
  34          void hc138_select(u8 n)
  35          {
  36   1              switch(n)
  37   1              {
  38   2                      case 4:
  39   2                              P2 = P2 & 0x1f | 0x80;  break;
  40   2                      case 5:
  41   2                              P2 = P2 & 0x1f | 0xa0;  break;
  42   2                      case 6:
  43   2                              P2 = P2 & 0x1f | 0xc0;  break;
  44   2                      case 7:
  45   2                              P2 = P2 & 0x1f | 0xe0;  break;
  46   2              }
  47   1      }
  48          
  49          void smg_delay()
  50          {
  51   1              u8 t = 100;
  52   1              while(t--);
  53   1      }
C51 COMPILER V9.54   MAIN                                                                  05/09/2022 18:19:55 PAGE 2   

  54          
  55          void smgshow_bit(u8 pos, u8 dat)
  56          {
  57   1              hc138_select(6);
  58   1              P0 = 1 << pos;
  59   1              hc138_select(7);
  60   1              P0 = dat;
  61   1              smg_delay();
  62   1              P0 = 0xff;
  63   1      }
  64          
  65          void delay()
  66          {
  67   1              u16 t = 30;
  68   1              while(t--)
  69   1              {
  70   2                      smgshow();
  71   2              }
  72   1      }
  73          
  74          void get_temp()
  75          {
  76   1              init_ds18b20();
  77   1              Write_DS18B20(0xcc);
  78   1              Write_DS18B20(0x44);
  79   1              init_ds18b20();
  80   1              Write_DS18B20(0xcc);
  81   1              Write_DS18B20(0xbe);
  82   1              delay();
  83   1              
  84   1              templ = Read_DS18B20();
  85   1              temph = Read_DS18B20();
  86   1              temp = temph;
  87   1              temp = (temp << 8) | templ;
  88   1              if((temp & 0xf800) == 0x0000)
  89   1              {
  90   2                      temp = (temp >> 4) * 10 + (temp & 0x000f) * 0.625;
  91   2              }
  92   1      }
  93          
  94          void get_temp_init()
  95          {
  96   1              do{
  97   2                      init_ds18b20();
  98   2                      Write_DS18B20(0xcc);
  99   2                      Write_DS18B20(0x44);
 100   2                      init_ds18b20();
 101   2                      Write_DS18B20(0xcc);
 102   2                      Write_DS18B20(0xbe);
 103   2      //              delay();
 104   2                      
 105   2                      templ = Read_DS18B20();
 106   2                      temph = Read_DS18B20();
 107   2                      temp = temph;
 108   2                      temp = (temp << 8) | templ;
 109   2                      if((temp & 0xf800) == 0x0000)
 110   2                      {
 111   3                              temp = (temp >> 4) * 10 + (temp & 0x000f) * 0.625;
 112   3                      }
 113   2              }while(temp == 850);
 114   1      }
 115          
C51 COMPILER V9.54   MAIN                                                                  05/09/2022 18:19:55 PAGE 3   

 116          void smgshow_temp()
 117          {
 118   1              smgshow_bit(0, ~t_display[25]);  //U
 119   1              smgshow_bit(1, ~t_display[1]);
 120   1              
 121   1              smgshow_bit(5, ~t_display[temp / 100]);
 122   1              smgshow_bit(6, ~dot_display[temp / 10 % 10]);
 123   1              smgshow_bit(7, ~t_display[temp % 10]);
 124   1      }
 125          
 126          void smgshow_settemp()
 127          {
 128   1              smgshow_bit(0, ~t_display[25]);  //U
 129   1              smgshow_bit(1, ~t_display[3]);
 130   1              
 131   1              smgshow_bit(6, ~t_display[settemp / 10]);
 132   1              smgshow_bit(7, ~t_display[settemp % 10]);
 133   1      }
 134          
 135          void write_ds1302()
 136          {
 137   1              u8 i;
 138   1              
 139   1              Write_Ds1302_Byte(0x8e, 0x00);
 140   1              for(i = 0; i < 7; i++){
 141   2                      Write_Ds1302_Byte(ds1302_wraddr[i], ds1302_buff[i]);
 142   2              }
 143   1              Write_Ds1302_Byte(0x8e, 0x80);
 144   1      }
 145          
 146          void read_ds1302()
 147          {
 148   1              u8 i;
 149   1              
 150   1              for(i = 0; i < 7; i++){
 151   2                      ds1302_buff[i] = Read_Ds1302_Byte(ds1302_rdaddr[i]);
 152   2              }
 153   1      }
 154          
 155          void smgshow_time()
 156          {
 157   1              smgshow_bit(0, ~t_display[25]);  //U
 158   1              smgshow_bit(1, ~t_display[2]);
 159   1              
 160   1              smgshow_bit(3, ~t_display[ds1302_buff[2] / 16]);
 161   1              smgshow_bit(4, ~t_display[ds1302_buff[2] % 16]);
 162   1              smgshow_bit(5, ~t_display[17]);
 163   1              smgshow_bit(6, ~t_display[ds1302_buff[1] / 16]);
 164   1              smgshow_bit(7, ~t_display[ds1302_buff[1] % 16]);
 165   1      }
 166          
 167          void smgshow_min_sec()
 168          {
 169   1              smgshow_bit(0, ~t_display[25]);  //U
 170   1              smgshow_bit(1, ~t_display[2]);
 171   1              
 172   1              smgshow_bit(3, ~t_display[ds1302_buff[1] / 16]);
 173   1              smgshow_bit(4, ~t_display[ds1302_buff[1] % 16]);
 174   1              smgshow_bit(5, ~t_display[17]);
 175   1              smgshow_bit(6, ~t_display[ds1302_buff[0] / 16]);
 176   1              smgshow_bit(7, ~t_display[ds1302_buff[0] % 16]);
 177   1      }
C51 COMPILER V9.54   MAIN                                                                  05/09/2022 18:19:55 PAGE 4   

 178          
 179          void smgshow()
 180          {
 181   1              if(s12_flag == 0)
 182   1                      smgshow_temp();
 183   1              if(s12_flag == 1)
 184   1                      smgshow_time();
 185   1              if(s12_flag == 2)
 186   1                      smgshow_settemp();
 187   1      }
 188          
 189          void Delay10ms()                //@12.000MHz
 190          {
 191   1              unsigned char i, j;
 192   1      
 193   1              i = 117;
 194   1              j = 184;
 195   1              do
 196   1              {
 197   2                      while (--j);
 198   2              } while (--i);
 199   1      }
 200          
 201          
 202          void key_scan()
 203          {
 204   1              P30 = 1; P31 = 1; P32 = 1; P33 = 0;
 205   1              P34 = 1; P35 = 1; P42 = 1; P44 = 1;
 206   1              if((P34 == 0) && (s12_flag == 2)){       //参数增加
 207   2                      Delay10ms();
 208   2                      if(P34 == 0){
 209   3                              while(P34 == 0){
 210   4                                      smgshow();
 211   4                              }
 212   3                              if(settemp < 99)
 213   3                                      settemp++;
 214   3                      }
 215   2              }
 216   1              if(P35 == 0){                           //界面转换
 217   2                      Delay10ms();
 218   2                      if(P35 == 0){
 219   3                              while(P35 == 0){
 220   4                                      smgshow();
 221   4                              }
 222   3                              s12_flag++;
 223   3                              if(s12_flag == 3)
 224   3                                      s12_flag = 0;
 225   3                      }
 226   2              }
 227   1              P30 = 1; P31 = 1; P32 = 0; P33 = 1;
 228   1              P34 = 1; P35 = 1; P42 = 1; P44 = 1;
 229   1              if(P35 == 0){                           //控制转换
 230   2                      Delay10ms();
 231   2                      if(P35 == 0){
 232   3                              while(P35 == 0){
 233   4                                      smgshow();
 234   4                              }
 235   3                              s13_flag = !s13_flag;
 236   3                              hc138_select(5);
 237   3                              P0 = 0x00;                       //切换控制后先断开继电器
 238   3                              relay_close = 0;
 239   3                      }
C51 COMPILER V9.54   MAIN                                                                  05/09/2022 18:19:55 PAGE 5   

 240   2              }
 241   1              if((P34 == 0) && (s12_flag == 2)){       //参数减少
 242   2                      Delay10ms();
 243   2                      if(P34 == 0){
 244   3                              while(P34 == 0){
 245   4                                      smgshow();
 246   4                              }
 247   3                              if(settemp > 10)
 248   3                                      settemp--;
 249   3                      }
 250   2              }
 251   1              if((P34 == 0) && (s12_flag == 1)){       //显示分秒
 252   2                      Delay10ms();
 253   2                      if(P34 == 0){
 254   3                              while(P34 == 0){
 255   4                                      read_ds1302();
 256   4                                      relay_work();
 257   4                                      led_work();
 258   4                                      smgshow_min_sec();
 259   4                              }
 260   3                      }
 261   2              }
 262   1      }
 263          
 264          void relay_work()
 265          {
 266   1              if(s13_flag == 0){            //默认温度控制
 267   2                      if(temp > settemp * 10){
 268   3                              relay_close = 1;
 269   3                              hc138_select(5);
 270   3                              P04 = 1;
 271   3                              P06 = 0;
 272   3                      }else{
 273   3                              relay_close = 0;
 274   3                              hc138_select(5);
 275   3                              P04 = 0;
 276   3                              P06 = 0;
 277   3                      }
 278   2              }else{                         //时间控制
 279   2                      if((ds1302_buff[0] == 0) && (ds1302_buff[1] == 0)){
 280   3                              TR0 = 1;
 281   3                              relay_close = 1;
 282   3                              hc138_select(5);
 283   3                              P04 = 1;
 284   3                              P06 = 0;
 285   3                      }
 286   2                      if(flag_5s)
 287   2                      {
 288   3                              flag_5s = 0;
 289   3                              hc138_select(5);
 290   3                              relay_close = 0;
 291   3                              P04 = 0;
 292   3                              P06 = 0;
 293   3                      }
 294   2              }
 295   1      }
 296          
 297          void led_work()
 298          {
 299   1              if((ds1302_buff[0] == 0) && (ds1302_buff[1] == 0)){   //L1
 300   2                      int_time = 1;
 301   2              }
C51 COMPILER V9.54   MAIN                                                                  05/09/2022 18:19:55 PAGE 6   

 302   1              if(int_time){
 303   2                      hc138_select(4);
 304   2                      P00 = 0; P03 = 1; P04 = 1;
 305   2                      P05 = 1; P06 = 1; P07 = 1;
 306   2              }
 307   1              if(t1_flag_5s){
 308   2                      int_time = 0;
 309   2                      t1_flag_5s = 0;
 310   2                      hc138_select(4);
 311   2                      P00 = 1; P03 = 1; P04 = 1;
 312   2                      P05 = 1; P06 = 1; P07 = 1;
 313   2              }
 314   1              
 315   1              if(s13_flag == 0){                       //L2
 316   2                      hc138_select(4);
 317   2                      P01 = 0; P03 = 1; P04 = 1;
 318   2                      P05 = 1; P06 = 1; P07 = 1;
 319   2              }else{
 320   2                      hc138_select(4);
 321   2                      P01 = 1; P03 = 1; P04 = 1;
 322   2                      P05 = 1; P06 = 1; P07 = 1;
 323   2              }
 324   1              
 325   1              if(relay_close){                   //L3
 326   2                      if(L3_flag){
 327   3                              hc138_select(4);
 328   3                              P02 = 1; P03 = 1; P04 = 1;
 329   3                              P05 = 1; P06 = 1; P07 = 1;
 330   3                      }else{
 331   3                              hc138_select(4);
 332   3                              P02 = 0; P03 = 1; P04 = 1;
 333   3                              P05 = 1; P06 = 1; P07 = 1;
 334   3                      }
 335   2              }
 336   1              
 337   1      }
 338          
 339          void tim_init()
 340          {
 341   1              TMOD = 0x11;
 342   1              TH0 = (65535 - 50000) / 256;
 343   1              TL0 = (65535 - 50000) % 256;
 344   1              TH1 = (65535 - 50000) / 256;
 345   1              TL1 = (65535 - 50000) % 256;
 346   1              ET0 = 1;
 347   1              TR0 = 0;
 348   1              ET1 = 1;
 349   1              TR1 = 1;
 350   1              EA = 1;
 351   1      }
 352          
 353          
 354          void sys_init()
 355          {
 356   1              hc138_select(4);
 357   1              P0 = 0xff;
 358   1              hc138_select(5);
 359   1              P0 = 0x00;
 360   1      }
 361          
 362          void main()
 363          {
C51 COMPILER V9.54   MAIN                                                                  05/09/2022 18:19:55 PAGE 7   

 364   1              sys_init();
 365   1              get_temp_init();
 366   1              tim_init();
 367   1              write_ds1302();
 368   1              while(1)
 369   1              {
 370   2                      key_scan();
 371   2                      get_temp();
 372   2                      read_ds1302();
 373   2                      smgshow();
 374   2                      relay_work();
 375   2                      led_work();
 376   2              }
 377   1      }
 378          
 379          
 380          void tim0() interrupt 1
 381          {
 382   1              cnt++;
 383   1              TH0 = (65535 - 50000) / 256;
 384   1              TL0 = (65535 - 50000) % 256;
 385   1              if(cnt == 100)
 386   1              {
 387   2                      cnt = 0;
 388   2                      flag_5s = 1;
 389   2              }
 390   1      }
 391          
 392          void tim1() interrupt 3
 393          {
 394   1              if(int_time){
 395   2                      t1_cnt++;
 396   2              }
 397   1              
 398   1              L3_cnt++;
 399   1              TH1 = (65535 - 50000) / 256;
 400   1              TL1 = (65535 - 50000) % 256;
 401   1              if(t1_cnt == 100)
 402   1              {
 403   2                      t1_cnt = 0;
 404   2                      t1_flag_5s = 1;
 405   2              }
 406   1              if(L3_cnt == 2)
 407   1              {
 408   2                      L3_cnt = 0;
 409   2                      L3_flag = !L3_flag;
 410   2              }
 411   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1422    ----
   CONSTANT SIZE    =     43    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     36       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
