C51 COMPILER V9.54   MAIN                                                                  06/12/2022 16:52:59 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil5\installed file\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\
                    -Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          /*
   2           * 2022/6/12
   3           */
   4          
   5          #include <STC15F2K60S2.H>
   6          #include "iic.h"
   7          #include "ds1302.h"                                                                     
   8          
   9          typedef unsigned char u8;
  10          typedef unsigned int u16;
  11          
  12          sbit TX = P1^0;
  13          sbit RX = P1^1;
  14          
  15          u8 dist;
  16          u8 gettime[] = {2, 3, 5, 7, 9};     //采集时间
  17          u8 time_i = 0;    u8 real_timei;
  18          u8 setdist = 20;  u8 real_setdist;
  19          u8 s5_flag = 0;
  20          u8 s4_flag = 0;
  21          u8 s8_flag = 0;
  22          bit mode_flag = 0;
  23          u8 time_s;
  24          u8 adc_dat;
  25          u8 dist_dat[50] = {0};
  26          u16 dist_i = 0;
  27          u8 dist_max = 0, dist_min = 200;
  28          u16 dist_ave = 0;
  29          bit L5_flag = 0;
  30          
  31          u8 wrds1302_addr[] = {0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c};
  32          u8 rdds1302_addr[] = {0x81, 0x83, 0x85, 0x87, 0x89, 0x8b, 0x8d};
  33          u8 ds1302_buff[] = {0x01, 0x20, 0x20, 0x01, 0x01, 0x01, 0x01};
  34          
  35          u8 code t_display[]={                       //标准字库
  36          //   0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
  37              0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71,
  38          //black  -     H    J    K    L    N    o   P    U     t    G    Q    r   M    y
  39              0x00,0x40,0x76,0x1E,0x70,0x38,0x37,0x5C,0x73,0x3E,0x78,0x3d,0x67,0x50,0x37,0x6e};
  40          u8 code dot_display[]={0xBF,0x86,0xDB,0xCF,0xE6,0xED,0xFD,0x87,0xFF,0xEF,0x46};    //0. 1. 2. 3. 4. 5. 6. 
             -7. 8. 9. -1
  41          
  42          void hc138_select(u8 n)
  43          {
  44   1              switch(n)
  45   1              {
  46   2                      case 4:
  47   2                              P2 = P2 & 0x1f | 0x80;  break;
  48   2                      case 5:
  49   2                              P2 = P2 & 0x1f | 0xa0;  break;
  50   2                      case 6:
  51   2                              P2 = P2 & 0x1f | 0xc0;  break;
  52   2                      case 7:
  53   2                              P2 = P2 & 0x1f | 0xe0;  break;
C51 COMPILER V9.54   MAIN                                                                  06/12/2022 16:52:59 PAGE 2   

  54   2              }
  55   1      }
  56          
  57          void smg_delay()
  58          {
  59   1              u8 t = 100;
  60   1              while(t--);
  61   1      }
  62          void smgshow_bit(u8 pos, u8 dat)
  63          {
  64   1              hc138_select(6);
  65   1              P0 = 1 << pos;
  66   1              hc138_select(7);
  67   1              P0 = dat;
  68   1              smg_delay();
  69   1              P0 = 0xff;
  70   1      }
  71          
  72          void Delay12us()                //@12.000MHz
  73          {
  74   1              unsigned char i;
  75   1      
  76   1              _nop_();
  77   1              _nop_();
  78   1              i = 33;
  79   1              while (--i);
  80   1      }
  81          void send_wave()
  82          {
  83   1              u8 i;
  84   1              for(i = 0; i < 8; i++)
  85   1              {
  86   2                      TX = 1;
  87   2                      Delay12us();
  88   2                      TX = 0;
  89   2                      Delay12us();
  90   2              }
  91   1      }
  92          void measure_dist()
  93          {
  94   1              u16 t;
  95   1              
  96   1              TMOD &= 0x0f;     //TIM1
  97   1              TH1 = 0;
  98   1              TL1 = 0;
  99   1              send_wave();
 100   1              TR1 = 1;
 101   1              while((RX == 1) && (TF1 == 0));
 102   1              TR1 = 0;
 103   1              if(TF1 == 0){
 104   2                      t = TH1;
 105   2                      t = (t << 8) | TL1;
 106   2                      dist = t * 0.017;
 107   2              }else{
 108   2                      TF1 = 0;
 109   2                      dist = 99;
 110   2              }
 111   1              dist_dat[dist_i] = dist;
 112   1              dist_i++;
 113   1              
 114   1      }
 115          void smgshow_dist()
C51 COMPILER V9.54   MAIN                                                                  06/12/2022 16:52:59 PAGE 3   

 116          {
 117   1              smgshow_bit(0, ~t_display[21]);
 118   1              if(mode_flag == 0)
 119   1                      smgshow_bit(1, ~t_display[12]);
 120   1              else
 121   1                      smgshow_bit(1, ~t_display[15]);
 122   1              if(dist > 99)
 123   1                      smgshow_bit(5, ~t_display[dist / 100]);
 124   1              if(dist > 9)
 125   1                      smgshow_bit(6, ~t_display[dist / 10 % 10]);
 126   1              smgshow_bit(7, ~t_display[dist % 10]);
 127   1      }
 128          void smgshow_gettime()        //采集时间
 129          {
 130   1              smgshow_bit(0, ~t_display[24]);
 131   1              smgshow_bit(1, ~t_display[1]);
 132   1              smgshow_bit(6, ~t_display[gettime[time_i] / 10]);
 133   1              smgshow_bit(7, ~t_display[gettime[time_i] % 10]);
 134   1      }
 135          void smgshow_distpara()        //距离参数
 136          {
 137   1              smgshow_bit(0, ~t_display[24]);
 138   1              smgshow_bit(1, ~t_display[2]);
 139   1              smgshow_bit(6, ~t_display[setdist / 10]);
 140   1              smgshow_bit(7, ~t_display[setdist % 10]);
 141   1      }
 142          void find_dist()          //寻找最大值等
 143          {
 144   1              u8 i, j;
 145   1              u8 temp;
 146   1              if(dist_i == 0){
 147   2                      dist_max = 0;
 148   2                      dist_min = 0;
 149   2                      dist_ave = 0;
 150   2              }else{
 151   2                      for(i = 0; i < dist_i - 1; i++){        //冒泡从小到大
 152   3                              for(j = 0; j  < (dist_i - i - 1); j++){
 153   4                                      if(dist_dat[j] > dist_dat[j + 1]){
 154   5                                              temp = dist_dat[j];
 155   5                                              dist_dat[j] = dist_dat[j + 1];
 156   5                                              dist_dat[j + 1] = temp;
 157   5                                      }
 158   4                              }
 159   3                      }
 160   2                      for(i = 0; i < dist_i - 1; i++){
 161   3                              dist_ave += dist_dat[i];
 162   3                      }
 163   2                      dist_ave = dist_ave * 10 / (dist_i - 1);
 164   2                      dist_max = dist_dat[dist_i - 1];
 165   2                      dist_min = dist_dat[0];
 166   2              }
 167   1      }
 168          void smgshow_record()           //显示记录数据
 169          {
 170   1              smgshow_bit(0, ~t_display[18]);
 171   1              if(s8_flag == 0){
 172   2                      smgshow_bit(1, 0xfe);
 173   2                      if(dist_max > 999)
 174   2                              smgshow_bit(4, ~t_display[dist_max / 1000]);
 175   2                      if(dist_max > 99)
 176   2                              smgshow_bit(5, ~t_display[dist_max / 100 % 10]);
 177   2                      if(dist_max > 9)
C51 COMPILER V9.54   MAIN                                                                  06/12/2022 16:52:59 PAGE 4   

 178   2                              smgshow_bit(6, ~t_display[dist_max / 10 % 10]);
 179   2                      smgshow_bit(7, ~t_display[dist_max % 10]);
 180   2              }
 181   1              else if(s8_flag == 1){
 182   2                      smgshow_bit(1, 0xf7);
 183   2                      if(dist_min > 999)
 184   2                              smgshow_bit(4, ~t_display[dist_min / 1000]);
 185   2                      if(dist_min > 99)
 186   2                              smgshow_bit(5, ~t_display[dist_min / 100 % 10]);
 187   2                      if(dist_min > 9)
 188   2                              smgshow_bit(6, ~t_display[dist_min / 10 % 10]);
 189   2                      smgshow_bit(7, ~t_display[dist_min % 10]);
 190   2              }
 191   1              else if(s8_flag == 2){
 192   2                      smgshow_bit(1, 0xbf);
 193   2                      if(dist_ave > 999)
 194   2                              smgshow_bit(4, ~t_display[dist_ave / 1000]);
 195   2                      if(dist_ave > 99)
 196   2                              smgshow_bit(5, ~t_display[dist_ave / 100 % 10]);
 197   2                      if(dist_ave > 9)
 198   2                              smgshow_bit(6, ~dot_display[dist_ave / 10 % 10]);
 199   2                      smgshow_bit(7, ~t_display[dist_ave % 10]);
 200   2              }
 201   1      }
 202          
 203          
 204          void wr_ds1302()
 205          {
 206   1              u8 i;
 207   1              Write_Ds1302_Byte(0x8e, 0x00);
 208   1              for(i = 0; i < 7; i++){
 209   2                      Write_Ds1302_Byte(wrds1302_addr[i], ds1302_buff[i]);
 210   2              }
 211   1              Write_Ds1302_Byte(0x8e, 0x80);
 212   1      }
 213          void rd_ds1302()
 214          {
 215   1              u8 i;
 216   1              for(i = 0; i < 7; i++){
 217   2                      ds1302_buff[i] = Read_Ds1302_Byte(rdds1302_addr[i]);
 218   2              }
 219   1      }
 220          void smgshow_time()
 221          {
 222   1              smgshow_bit(0, ~t_display[ds1302_buff[2] / 16]);
 223   1              smgshow_bit(1, ~t_display[ds1302_buff[2] % 16]);
 224   1              smgshow_bit(2, ~t_display[17]);
 225   1              smgshow_bit(3, ~t_display[ds1302_buff[1] / 16]);
 226   1              smgshow_bit(4, ~t_display[ds1302_buff[1] % 16]);
 227   1              smgshow_bit(5, ~t_display[17]);
 228   1              smgshow_bit(6, ~t_display[ds1302_buff[0] / 16]);
 229   1              smgshow_bit(7, ~t_display[ds1302_buff[0] % 16]);
 230   1      }
 231          
 232          u8 pfc8591_adc(u8 channel)
 233          {
 234   1              u8 dat;
 235   1              IIC_Start();
 236   1              IIC_SendByte(0x90);
 237   1              IIC_WaitAck();
 238   1              IIC_SendByte(channel);
 239   1              IIC_WaitAck();
C51 COMPILER V9.54   MAIN                                                                  06/12/2022 16:52:59 PAGE 5   

 240   1              
 241   1              IIC_Start();
 242   1              IIC_SendByte(0x91);
 243   1              IIC_WaitAck();
 244   1              dat = IIC_RecByte();
 245   1              IIC_SendAck(1);
 246   1              IIC_Stop();
 247   1              return dat;
 248   1      }
 249          void pfc8591_dac(u8 dat)
 250          {
 251   1              IIC_Start();
 252   1              IIC_SendByte(0x90);
 253   1              IIC_WaitAck();
 254   1              IIC_SendByte(0x40);
 255   1              IIC_WaitAck();
 256   1              IIC_SendByte(dat);
 257   1              IIC_WaitAck();
 258   1              IIC_Stop();
 259   1      }
 260          void dac_out()
 261          {
 262   1              if((dist > 0) && (dist <= 10))
 263   1                      pfc8591_dac(51);
 264   1              else if((dist > 10) && (dist <= 80))
 265   1                      pfc8591_dac((dist * 0.057 + 0.429) * 51);   //先扩大100倍，再缩小
 266   1              else
 267   1                      pfc8591_dac(255);
 268   1      }
 269          
 270          void smgshow()
 271          {
 272   1              if((s4_flag == 0) && (s5_flag == 0)){
 273   2                      smgshow_time();
 274   2              }
 275   1              else if((s4_flag == 0) && (s5_flag == 1)){
 276   2                      smgshow_dist();
 277   2              }
 278   1              else if((s4_flag == 0) && (s5_flag == 2)){
 279   2                      dist_ave = 0;
 280   2                      find_dist();
 281   2                      smgshow_record();
 282   2              }
 283   1              else if((s4_flag == 1) && (s5_flag == 0))
 284   1                      smgshow_gettime();
 285   1              else if((s4_flag == 1) && (s5_flag == 1))
 286   1                      smgshow_distpara();
 287   1      }
 288          
 289          void Delay10ms()                //@12.000MHz
 290          {
 291   1              unsigned char i, j;
 292   1      
 293   1              i = 117;
 294   1              j = 184;
 295   1              do
 296   1              {
 297   2                      while (--j);
 298   2              } while (--i);
 299   1      }
 300          void key_scan()
 301          {
C51 COMPILER V9.54   MAIN                                                                  06/12/2022 16:52:59 PAGE 6   

 302   1              P30 = 1; P31 = 1; P32 = 0; P33 = 1;
 303   1              P34 = 1; P35 = 1; P42 = 1; P44 = 1;
 304   1              if(P44 == 0){                           //S5
 305   2                      Delay10ms();
 306   2                      if(P44 == 0){
 307   3                              while(P44 == 0){
 308   4                                      rd_ds1302();
 309   4                                      smgshow();
 310   4                              }
 311   3                              s5_flag++;
 312   3                              if(s4_flag == 0){                      //时间数据界面
 313   4                                      if(s5_flag > 2)
 314   4                                              s5_flag = 0;
 315   4                                      if(s5_flag == 2)                   //进入数据记录界面
 316   4                                              s8_flag = 0;
 317   4                              }else{
 318   4                                      if(s5_flag > 1)
 319   4                                              s5_flag = 0;
 320   4                              }
 321   3                      }
 322   2              }
 323   1              if(P42 == 0){                           //S9
 324   2                      Delay10ms();
 325   2                      if(P42 == 0){
 326   3                              while(P42 == 0){
 327   4                                      rd_ds1302();
 328   4                                      smgshow();
 329   4                              }
 330   3                              if((s4_flag == 1) && (s5_flag == 0)){               //采集时间参数界面
 331   4                                      time_i++;
 332   4                                      if(time_i > 4)
 333   4                                              time_i = 0;
 334   4                              }
 335   3                              if((s4_flag == 1) && (s5_flag == 1)){               //距离参数界面
 336   4                                      setdist += 10;
 337   4                                      if(setdist > 80)
 338   4                                              setdist = 10;
 339   4                              }
 340   3                      }
 341   2              }
 342   1              P30 = 1; P31 = 1; P32 = 1; P33 = 0;
 343   1              P34 = 1; P35 = 1; P42 = 1; P44 = 1;
 344   1              if(P44 == 0){                           //S4
 345   2                      Delay10ms();
 346   2                      if(P44 == 0){
 347   3                              while(P44 == 0){
 348   4                                      rd_ds1302();
 349   4                                      smgshow();
 350   4                              }
 351   3                              s4_flag = !s4_flag;
 352   3                              s5_flag = 0;
 353   3                              if(s4_flag == 0){                           //退出参数界面参数生效
 354   4                                      real_setdist = setdist;
 355   4                                      real_timei = time_i;
 356   4                              }
 357   3                      }
 358   2              }
 359   1              if(P42 == 0){                           //S8
 360   2                      Delay10ms();
 361   2                      if(P42 == 0){
 362   3                              while(P42 == 0){
 363   4                                      rd_ds1302();
C51 COMPILER V9.54   MAIN                                                                  06/12/2022 16:52:59 PAGE 7   

 364   4                                      smgshow();
 365   4                              }
 366   3                              if((s5_flag == 1) && (s4_flag == 0))                    //测距数据显示界面
 367   3                                      mode_flag = !mode_flag;
 368   3                              if((s5_flag == 2) && (s4_flag == 0)){                   //数据记录显示界面
 369   4                                      s8_flag++;
 370   4                                      if(s8_flag > 2)
 371   4                                              s8_flag = 0;
 372   4                              }
 373   3                      }
 374   2              }
 375   1      }
 376          
 377          void led_work()
 378          {
 379   1              if((s4_flag == 0) && (s5_flag == 0)){
 380   2                      hc138_select(4);
 381   2                      P00 = 0; P01 = 1; P02 = 1;
 382   2              }
 383   1              else if((s4_flag == 0) && (s5_flag == 1)){
 384   2                      hc138_select(4);
 385   2                      P00 = 1; P01 = 0; P02 = 1;
 386   2              }
 387   1              else if((s4_flag == 0) && (s5_flag == 2)){
 388   2                      hc138_select(4);
 389   2                      P00 = 1; P01 = 1; P02 = 0;
 390   2      //              dist_ave = 0;
 391   2      //              find_dist();
 392   2      //              smgshow_record();
 393   2              }
 394   1              if(mode_flag){        //定时模式
 395   2                      hc138_select(4);
 396   2                      P03 = 1;
 397   2              }else{
 398   2                      hc138_select(4);
 399   2                      P03 = 0;
 400   2              }
 401   1              if(L5_flag){
 402   2                      hc138_select(4);
 403   2                      P04 = 0;
 404   2              }
 405   1              if(mode_flag == 0){
 406   2                      if(pfc8591_adc(1) > 125){
 407   3                              hc138_select(4);
 408   3                              P05 = 0;
 409   3                      }else{
 410   3                              hc138_select(4);
 411   3                              P05 = 1;
 412   3                      }
 413   2              }
 414   1      }
 415          
 416          void sys_init()
 417          {
 418   1              hc138_select(4);
 419   1              P0 = 0xff;
 420   1              hc138_select(5);
 421   1              P0 = 0x00;
 422   1      }
 423          void delay(u8 t)
 424          {
 425   1              while(t--){
C51 COMPILER V9.54   MAIN                                                                  06/12/2022 16:52:59 PAGE 8   

 426   2                      smgshow();
 427   2              }
 428   1      }
 429          void main()
 430          {
 431   1              u8 i = 0;
 432   1              u8 measure_flag = 0;
 433   1              u8 cnt = 0;
 434   1              
 435   1              sys_init();
 436   1              wr_ds1302();
 437   1              while(1)
 438   1              {
 439   2                      rd_ds1302();
 440   2                      if(mode_flag){        //定时模式
 441   3                              hc138_select(4);
 442   3                              P03 = 1;
 443   3                              if((ds1302_buff[0] % gettime[real_timei]) == 0){
 444   4                                      i++;
 445   4                                      if(i == 60){            //触发后仅测量一次
 446   5                                              i = 0;
 447   5                                              measure_dist();
 448   5                                      }
 449   4                                      if((dist > (real_setdist - 5)) && (dist < (real_setdist + 5)))
 450   4                                              cnt++;
 451   4                                      if(cnt == 3){
 452   5                                              cnt = 0;
 453   5                                              L5_flag = 1;
 454   5                                      }
 455   4                              }
 456   3                      }else{                //触发模式
 457   3                              hc138_select(4);
 458   3                              P03 = 0;
 459   3                              pfc8591_adc(1);            //不加这一句的话仅ADC转换一次，结果不对
 460   3                              if(measure_flag){          //触发后仅测量一次
 461   4                                      measure_flag = 0;
 462   4                                      if(pfc8591_adc(1) < 125){
 463   5                                              measure_dist();
 464   5                                      }
 465   4                              }
 466   3                              if(pfc8591_adc(1) > 125){
 467   4                                      measure_flag = 1;
 468   4                              }
 469   3                      }
 470   2                      smgshow();
 471   2                      if((s4_flag == 0) && (s5_flag == 2)){
 472   3                              dist_ave = 0;
 473   3                              find_dist();
 474   3                              smgshow_record();         //数码管增强函数
 475   3                      }
 476   2                      key_scan();
 477   2                      dac_out();
 478   2                      led_work();
 479   2                      delay(30);
 480   2              }
 481   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1977    ----
   CONSTANT SIZE    =     43    ----
   XDATA SIZE       =   ----    ----
C51 COMPILER V9.54   MAIN                                                                  06/12/2022 16:52:59 PAGE 9   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =     92       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
